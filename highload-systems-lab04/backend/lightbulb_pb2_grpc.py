# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import lightbulb_pb2 as lightbulb__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in lightbulb_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class LightbulbServiceStub(object):
    """Service definition for controlling a lightbulb
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetState = channel.unary_unary(
                '/lightbulb.LightbulbService/GetState',
                request_serializer=lightbulb__pb2.GetStateRequest.SerializeToString,
                response_deserializer=lightbulb__pb2.LightbulbState.FromString,
                _registered_method=True)
        self.SetPower = channel.unary_unary(
                '/lightbulb.LightbulbService/SetPower',
                request_serializer=lightbulb__pb2.SetPowerRequest.SerializeToString,
                response_deserializer=lightbulb__pb2.LightbulbState.FromString,
                _registered_method=True)
        self.SetBrightness = channel.unary_unary(
                '/lightbulb.LightbulbService/SetBrightness',
                request_serializer=lightbulb__pb2.SetBrightnessRequest.SerializeToString,
                response_deserializer=lightbulb__pb2.LightbulbState.FromString,
                _registered_method=True)
        self.SetColorTemperature = channel.unary_unary(
                '/lightbulb.LightbulbService/SetColorTemperature',
                request_serializer=lightbulb__pb2.SetColorTemperatureRequest.SerializeToString,
                response_deserializer=lightbulb__pb2.LightbulbState.FromString,
                _registered_method=True)
        self.StreamState = channel.unary_stream(
                '/lightbulb.LightbulbService/StreamState',
                request_serializer=lightbulb__pb2.StreamStateRequest.SerializeToString,
                response_deserializer=lightbulb__pb2.LightbulbState.FromString,
                _registered_method=True)


class LightbulbServiceServicer(object):
    """Service definition for controlling a lightbulb
    """

    def GetState(self, request, context):
        """Get the current state of the lightbulb
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetPower(self, request, context):
        """Turn the lightbulb on or off
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetBrightness(self, request, context):
        """Set the brightness of the lightbulb
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetColorTemperature(self, request, context):
        """Set the color temperature of the lightbulb
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamState(self, request, context):
        """Stream the lightbulb state changes in real-time
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LightbulbServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetState': grpc.unary_unary_rpc_method_handler(
                    servicer.GetState,
                    request_deserializer=lightbulb__pb2.GetStateRequest.FromString,
                    response_serializer=lightbulb__pb2.LightbulbState.SerializeToString,
            ),
            'SetPower': grpc.unary_unary_rpc_method_handler(
                    servicer.SetPower,
                    request_deserializer=lightbulb__pb2.SetPowerRequest.FromString,
                    response_serializer=lightbulb__pb2.LightbulbState.SerializeToString,
            ),
            'SetBrightness': grpc.unary_unary_rpc_method_handler(
                    servicer.SetBrightness,
                    request_deserializer=lightbulb__pb2.SetBrightnessRequest.FromString,
                    response_serializer=lightbulb__pb2.LightbulbState.SerializeToString,
            ),
            'SetColorTemperature': grpc.unary_unary_rpc_method_handler(
                    servicer.SetColorTemperature,
                    request_deserializer=lightbulb__pb2.SetColorTemperatureRequest.FromString,
                    response_serializer=lightbulb__pb2.LightbulbState.SerializeToString,
            ),
            'StreamState': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamState,
                    request_deserializer=lightbulb__pb2.StreamStateRequest.FromString,
                    response_serializer=lightbulb__pb2.LightbulbState.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'lightbulb.LightbulbService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('lightbulb.LightbulbService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class LightbulbService(object):
    """Service definition for controlling a lightbulb
    """

    @staticmethod
    def GetState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lightbulb.LightbulbService/GetState',
            lightbulb__pb2.GetStateRequest.SerializeToString,
            lightbulb__pb2.LightbulbState.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetPower(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lightbulb.LightbulbService/SetPower',
            lightbulb__pb2.SetPowerRequest.SerializeToString,
            lightbulb__pb2.LightbulbState.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetBrightness(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lightbulb.LightbulbService/SetBrightness',
            lightbulb__pb2.SetBrightnessRequest.SerializeToString,
            lightbulb__pb2.LightbulbState.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetColorTemperature(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lightbulb.LightbulbService/SetColorTemperature',
            lightbulb__pb2.SetColorTemperatureRequest.SerializeToString,
            lightbulb__pb2.LightbulbState.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/lightbulb.LightbulbService/StreamState',
            lightbulb__pb2.StreamStateRequest.SerializeToString,
            lightbulb__pb2.LightbulbState.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
